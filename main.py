# Final Project
# CS 111, Hayes & Reckinger

import turtle
import random
import math

colors = ["spring green","turquoise","black","yellow","white"]

faces = ["normal.gif","nice.gif","love.gif","best.gif","worst.gif",'worse.gif','bad.gif']

s = turtle.getscreen()
width = 800
height = 600
s.setup(width + 10, height + 10)
s.screensize(width, height)
t = turtle.Turtle()

tree = turtle.Turtle()
tree.shape('arrow')
tree.speed(0)
tree.width(3)
tree.fillcolor('')
tree.pencolor('')
t.speed(0)
t.shape("arrow")
t.fillcolor("") 
t.pencolor("") 
t.width(3) 
t.penup()
turtle.hideturtle()
t = turtle.Turtle()
t.shape('turtle')
t.hideturtle()

previous_answer = True

global face_i 
face_i = 0

plastic = turtle.Turtle()
turtle.addshape('plastic.gif')
plastic.shape('plastic.gif')
plastic.hideturtle()

reusable = turtle.Turtle()
turtle.addshape('reusable.gif')
reusable.shape('reusable.gif')
reusable.hideturtle()

global button
button = turtle.Turtle()
turtle.addshape('button.gif')
button.shape("button.gif")
button.hideturtle()
text = turtle.Turtle()
text.hideturtle()
t.hideturtle()

face = turtle.Turtle()
face.penup()
face.hideturtle()
face.goto(330,250)
turtle.addshape("worst.gif")
turtle.addshape("worse.gif")
turtle.addshape("bad.gif")
turtle.addshape("normal.gif")
turtle.addshape("nice.gif")
turtle.addshape("love.gif")
turtle.addshape("best.gif")
face.shape('best.gif')
face.hideturtle()

button1 = turtle.Turtle()
turtle.addshape('button1.gif')
button1.shape("button1.gif")
button1.hideturtle()


tree_bool = True


def opening_screen():
    s.bgpic('color2.gif')
    text.color('white')
    button.hideturtle()
    button.penup()
    button.goto(0,-175)
    text.penup()
    text.goto(0,100)
    text.write('Climate change and its impacts', False, align = 'center', font = ('Arial', 30))
    button.showturtle()
    button.onclick(tree_screen)


def first_screen(x, y):
    button.hideturtle()
    text.clear()
    text.hideturtle()
    text.color('red')
    s.bgpic('earth.gif')
    s.bgcolor('black')
    text.penup()
    text.goto(0,175)
    text.write('What is climate change and why is it important', False, align = 'center', font = ('Arial', 25))
    text.goto(-10, 125)
    text.write('Climate change refers to long-term shifts in temperatures and weather patterns', False, align = 'center', font = ('Arial', 15, ))
    text.goto(-10, 80)
    text.write('Examples include intense droughts, water scarcity, severe fires, rising sea levels', False, align = 'center', font = ('Arial', 15))
    text.goto(-10, 30)
    text.write('Humans are to blame because of greenhouse gas emmisons, deforestation and urbanization', False, align = 'center', font = ('Arial', 14))
    text.goto(-10, -10)
    text.write('Climate change is the single greatest threat to humanity and change is needed', False, align = 'center', font = ('Arial', 14))
    button.penup()
    button.goto(0, -80)
    button.showturtle()
    button.onclick(tree_screen)


def draw_building1(sz, color):
  t.fillcolor(color)
  t.pencolor("")
  t.pendown()
  t.begin_fill()
  t.left(90)
  t.forward(sz)
  t.right(90)
  t.forward(sz*0.05)
  t.left(90)
  t.forward(sz*0.4)
  t.right(90)
  t.forward(sz*0.08)
  t.left(90)
  t.forward(sz*0.2)
  t.right(90)
  t.forward(sz*0.3)
  t.right(90)
  t.forward(sz*0.2)
  t.left(90)
  t.forward(sz*0.08)
  t.right(90)
  t.forward(sz*0.4)
  t.left(90)
  t.forward(sz*0.05)
  t.right(90)
  t.forward(sz)
  t.right(90)
  t.forward(sz*1.70)
  t.end_fill()
  t.penup()
  t.right(180)
  t.forward(sz*2)

def draw_building2(sz, color):
  t.fillcolor(color)
  t.pencolor("")
  t.pendown()
  t.begin_fill()
  t.left(90)
  t.forward(sz)
  t.right(90)
  t.forward(sz*0.2)
  t.right(90)
  t.forward(sz*0.3)
  t.left(90)
  t.forward(sz*0.1)
  t.right(90)
  t.forward(sz*0.7)
  t.right(90)
  t.forward(sz*0.4)
  t.end_fill()
  t.penup()
  t.right(180)
  t.forward(sz)

def draw_building3(sz, color, angle):
  t.fillcolor(color)
  t.pencolor("")
  t.forward(sz * 0.3)
  t.pendown()
  t.begin_fill()
  t.left(90)
  t.forward(sz)
  t.left(180 - angle)
  t.forward(0.3 * sz / math.sin(angle / 180 * math.pi))
  t.left(angle)
  t.forward(sz - sz * 0.3 / math.tan(angle / 180 * math.pi))
  t.left(90)
  t.forward(sz*0.9)
  t.end_fill()
  t.penup()

def draw_building4(sz, color, angle):
  t.fillcolor(color)
  t.pencolor("")
  t.forward(0.4 * sz * math.sin(angle / 180 * math.pi))
  t.pendown()
  t.begin_fill()
  t.left(90)
  t.forward(sz)
  t.left(45)
  t.forward(0.2 * sz)
  t.right(45)
  t.forward(0.3 * sz)
  t.right(180)
  t.forward(0.3 * sz)
  t.right(45)
  t.forward(0.2 * sz)
  t.left(45)
  t.forward(sz)
  t.left(90)
  t.forward(0.4 * sz * math.sin(angle / 180 * math.pi))
  t.end_fill()
  t.penup()
  t.forward(0.8 * sz * math.sin(angle / 180 * math.pi))

def building_connector(sz,xcord,ycord,color):
    t.fillcolor(color)
    t.pencolor('')
    t.pendown()
    t.begin_fill()
    t.goto(xcord,ycord)
    t.left(90)
    t.forward(sz*0.5)
    t.right(90)
    t.forward(1300)
    t.right(90)
    t.forward(sz*0.5)
    t.right(90)
    t.forward(1300)
    t.end_fill()
    t.penup()
    t.right(180)

def smokebubble(sz,xcord,ycord,color):
    t.speed(5)
    t.goto(xcord,ycord)
    t.fillcolor(color)
    t.pencolor()
    t.pendown()
    t.begin_fill()
    t.circle(sz)
    t.end_fill()
    t.penup()


def wetsand(sz,xcord,ycord,color):
    t.fillcolor(color)
    t.pencolor('')
    t.pendown()
    t.begin_fill()
    t.goto(xcord,ycord)
    t.left(90)
    t.forward(sz)
    t.right(90)
    t.forward(1300)
    t.right(90)
    t.forward(sz)
    t.right(90)
    t.forward(1300)
    t.end_fill()
    t.penup()
    t.right(180)

def bubble(sz,xcord,ycord,color):
    t.speed(0)
    t.goto(xcord,ycord)
    t.fillcolor(color)
    t.pencolor()
    t.pendown()
    t.begin_fill()
    t.circle(sz)
    t.end_fill()
    t.penup()

def draw_trash(sz,xcord,ycord):
    trash = turtle.Turtle()
    trash.speed(0)
    trash.shape("arrow")
    trash.pencolor("") 
    trash.width(3) 
    trash.penup()
    shape_choice = random.randint(1,3)
    color_i = random.randint(0,4)
    trash.fillcolor(colors[color_i])
    trash.goto(xcord,ycord)
    if shape_choice == 1:
        draw_sqr(trash,sz,color_i)
    elif shape_choice == 2:
        draw_tri(trash,sz,color_i)
    elif shape_choice == 3:
        draw_rect(trash,sz,color_i)
    trash.setheading(0)

def draw_sqr(trash,sz,color_i):
    trash.fillcolor(colors[color_i])
    trash.pendown()
    trash.begin_fill()
    trash.left(random.randint(10,160))
    for _ in range(4):
        trash.forward(sz)
        trash.left(90)
    trash.end_fill()
    trash.penup()
    trash.setheading(0)
    trash.hideturtle()

def draw_tri(trash,sz,color_i):
    trash.fillcolor(colors[color_i])
    trash.pendown()
    trash.begin_fill()
    trash.left(random.randint(10,160))
    for _ in range(3):
        trash.forward(sz)
        trash.left(120)
    trash.end_fill()
    trash.penup()
    trash.setheading(0)
    trash.hideturtle()

def draw_rect(trash,sz,color_i):
    trash.fillcolor(colors[color_i])
    trash.pendown()
    trash.begin_fill()
    trash.left(random.randint(10,160))
    for _ in range(2):
        trash.forward(sz)
        trash.left(90)
        trash.forward(sz*0.7)
        trash.left(90)
    trash.end_fill()
    trash.penup()
    trash.setheading(0)
    trash.hideturtle()

def city_screen(x,y):
    s.clear()
    text.clear()
    s.bgcolor('light blue')
    t.goto(-650, -50)
    t.fillcolor('dimgray')
    t.pencolor('')
    t.pendown()
    t.begin_fill()
    t.goto(650,-50)
    t.goto(650,-400)
    t.goto(-650,-400)
    t.goto(-650,-50)
    t.end_fill()
    t.penup()
    t.hideturtle()

    building_connector(200,-650,-70,"dark gray")
    building_connector(200,-650,-170,"gray")

    t.goto(-650,10)
    draw_building1(75,"dark gray")
    draw_building2(75,"dark gray")
    draw_building3(75,"dark gray",30)
    draw_building3(75,"dark gray",60)
    draw_building4(75,"dark gray",30)
    draw_building4(75,"dark gray",60)
    draw_building1(75,"dark gray")
    draw_building2(75,"dark gray")
    draw_building3(75,"dark gray",30)
    draw_building3(75,"dark gray",60)
    draw_building4(75,"dark gray",30)
    draw_building4(75,"dark gray",60)
    draw_building4(75,"dark gray",30)
    draw_building4(75,"dark gray",60)
    draw_building1(75,"dark gray")
    draw_building2(75,"dark gray")
    draw_building3(75,"dark gray",30)
    draw_building3(75,"dark gray",60)
    draw_building4(75,"dark gray",30)
    draw_building4(75,"dark gray",60)
    draw_building4(75,"dark gray",30)
    draw_building4(75,"dark gray",60)
    draw_building1(75,"dark gray")
    draw_building2(75,"dark gray")
    draw_building3(75,"dark gray",30)
    t.goto(-650,-100)
    draw_building3(130,"gray",30)
    draw_building3(130,"gray",60)
    draw_building4(130,"gray",30)
    draw_building4(130,"gray",60)
    draw_building4(130,"gray",30)
    draw_building4(130,"gray",60)
    draw_building1(130,"gray")
    draw_building2(130,"gray")
    draw_building3(130,"gray",30)
    draw_building3(130,"gray",60)
    draw_building4(130,"gray",30)
    draw_building4(130,"gray",60)

    smokebubble(20,60,100,'gray')
    smokebubble(34,70,120,'gray')
    smokebubble(39,100,140,'gray')

    smokebubble(7,-254,115,"dark gray")
    smokebubble(10,-262,125,"dark gray")
    smokebubble(17,-273,132,"dark gray")

    text.goto(0,200)
    text.write('Cities', False, align = 'center', font = ('Arial', 25, 'bold'))
    text.goto(-390, -60)
    text.write('1. Overall climate', False, font = ('Arial', 18, 'bold'))
    text.goto(-390, -90)
    text.write(f' Cities produce more than 60 per cent of greenhouse gas emissions', font = ('Arial', 14))
    text.goto(-390, -135)
    text.write('2. Loss of biodiversity', False, font = ('Arial', 18, 'bold'))
    text.goto(-390, -190)
    text.write(f'A predicted 11 to 33 million hectares of natural \n habitat will be lost by 2100 as a result of urban development', font = ('Arial', 14))
    text.goto(-390, -230)
    text.write('3. Ruins', False, font = ('Arial', 18, 'bold'))
    text.goto(-390, -280)
    text.write(f'A typical passenger vehicle emits about 4.6 \n metric tons of CO2 per year, and cities only add more to that emission', font = ('Arial', 14))
    
    button = turtle.Turtle()
    turtle.addshape('button.gif')
    button.shape("button.gif")
    button.penup()
    button.clear()
    button.hideturtle()
    button.goto(300, -140)
    button.showturtle()
    button.onclick(ocean_screen)

def ocean_wave():
    x=0
    ocean = turtle.Turtle()
    turtle.addshape('ocean.gif')   
    ocean.hideturtle()
    ocean.shape('ocean.gif')
    ocean.penup()
    ocean.goto(180,0)
    ocean.showturtle()
    ocean.speed(1)
    ocean.pencolor('')
    for i in range(30):
        ocean.setheading(0)
        x += 1
        ocean.forward(x)
    ocean.right(180)
    x=0
    for i in range(30):
        ocean.setheading(180)
        x += 1
        ocean.forward(x)

def ocean_screen(x,y):
    s.clear()
    text.clear()
    s.bgcolor("khaki") 
    t.speed(0)
    t.shape("arrow")
    t.fillcolor("white") 
    t.pencolor("")
    t.width(3) 
    t.penup()
    t.goto(-650, 0)
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,500))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,500))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-200,500))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-200,550))
    


    wetsand(1300,-50,-400,"dark khaki")

    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,300))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-200,550))
    draw_trash(random.randint(20,70),random.randint(-40,300),random.randint(-400,300))
    draw_trash(random.randint(20,70),random.randint(-40,300),random.randint(-400,300))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,300))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,300))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,300))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,300))
    draw_trash(random.randint(20, 70),random.randint(-40,300),random.randint(-400,300))

    ocean_wave()
    
    button = turtle.Turtle()
    turtle.addshape('button.gif')
    button.shape("button.gif")
    button.penup()
    button.clear()
    button.hideturtle()
    button.goto(300, -140)
    button.showturtle()
    button.onclick(ice_screen)
    text.clear()
    text.penup()
    text.goto(-300,200)
    text.write('Ocean', False, align = 'center', font = ('Arial', 25, 'bold'))
    text.goto(-390, 120)
    text.write('1. Overall climate', False, font = ('Arial', 18, 'bold'))
    text.goto(-390, 70)
    text.write(f'Roughly 706 million gallons of oil enter the \n ocean every year', font = ('Arial', 14))
    text.goto(-390, 30)
    text.write('2. Loss of biodiversity', False, font = ('Arial', 18, 'bold'))
    text.goto(-390, -20)
    text.write('Things like Overfishing, Climate Change,\n Oil Spills, and Pollution', font = ('Arial', 14))
    text.goto(-390, -60)
    text.write('3. Ruins Water', False, font = ('Arial', 18, 'bold'))
    text.goto(-390, -130)
    text.write('More than 171 trillion pieces of plastic are \n now estimated to be floating in the \n worlds oceans', font = ('Arial', 14))
    

def make_iceberg(x, y):
    ice = turtle.Turtle()
    ice.shape('circle')
    ice.color('white')
    ice.penup()
    ice.goto(x, y)
    ice.shapesize(7, 10)
    return ice

def ice_1(sz, color):
    t.speed(0)
    t.shape("arrow")
    t.fillcolor(color) 
    t.pencolor("")
    t.width(3) 
    t.penup()
    t.pendown()
    t.begin_fill()
    t.left(30)
    t.forward(sz)
    t.right(10)
    t.forward(sz*.5)
    t.left(20)
    t.forward(sz)
    t.right(30)
    t.forward(sz*0.7)
    t.right(60)
    t.forward(sz*2)
    t.setheading(0)
    t.left(180)
    t.forward(sz*2)
    t.end_fill()
    t.penup()
    t.setheading(0)
    t.forward(sz*1.7)

def ice_2(sz,color):
    t.speed(0)
    t.shape("arrow")
    t.fillcolor(color) 
    t.pencolor("")
    t.width(3) 
    t.penup()
    t.pendown()
    t.begin_fill()
    t.left(90)
    t.forward(sz*0.3)
    t.setheading(0)
    t.left(20)
    t.forward(sz*0.3)
    t.right(15)
    t.forward(sz*0.8)
    t.left(45)
    t.forward(sz)
    t.right(90)
    t.forward(sz)
    t.left(15)
    t.forward(sz*0.8)
    t.right(20)
    t.forward(sz*0.3)
    t.right(134)
    t.forward(sz*3)
    t.end_fill()
    t.penup()
    t.setheading(0)
    t.left(90)
    t.forward(sz*0.1)
    t.right(90)
    t.forward(sz*2)

def ice_3(sz,color):
    t.speed(0)
    t.shape("arrow")
    t.fillcolor(color) 
    t.pencolor("")
    t.width(3) 
    t.penup()
    t.pendown()
    t.begin_fill()
    t.left(60)
    t.forward(sz*1.5)
    t.right(60)
    t.forward(sz)
    t.right(60)
    t.forward(sz*1.5)
    t.setheading(0)
    t.left(180)
    t.forward(sz*2)
    t.end_fill()
    t.penup()
    t.setheading(0)
    t.forward(sz*1.8)

def ice_background():
    t.speed(0)
    t.shape("arrow")
    t.fillcolor("white") 
    t.pencolor("")
    t.width(3) 
    t.penup()
    building_connector(1300,-650,-680,"gainsboro")
    t.goto(-700,-50)
    for i in range(15):
        ice_i = random.randint(1,3)
        if ice_i == 1:
            ice_1(random.randint(40,60),"gainsboro")
        elif ice_i == 2:
            ice_2(random.randint(40,60),"gainsboro")
        elif ice_i == 3:
            ice_3(random.randint(40,60),"gainsboro")
    building_connector(1300,-650,-780,"white smoke")
    t.goto(-700,-150)
    for i in range(15):
        ice_i = random.randint(1,3)
        if ice_i == 1:
            ice_1(random.randint(40,60),"white smoke")
        elif ice_i == 2:
            ice_2(random.randint(40,60),"white smoke")
        elif ice_i == 3:
            ice_3(random.randint(40,60),"white smoke")
    t.goto(-400,-200)
    t.fillcolor('white')
    t.pendown()
    t.begin_fill()
    t.forward(60)
    t.left(30)
    t.forward(80)
    t.right(10)
    t.forward(46)
    t.right(40)
    t.forward(60)
    t.right(15)
    t.forward(80)
    t.right(10)
    t.forward(20)
    t.left(23)
    t.forward(80)
    t.setheading(0)
    t.forward(600)
    t.right(90)
    t.forward(300)
    t.right(90)
    t.forward(1200)
    t.end_fill()
    t.penup()    

def ice_screen(x, y):
    s.clear()
    s.bgcolor('lightblue')
    ice_background()
    button = turtle.Turtle()
    turtle.addshape('button.gif')
    button.shape("button.gif")
    button.penup()
    button.clear()
    button.hideturtle()
    button.goto(300, -140)
    button.showturtle()
    text.clear()
    text.penup()
    text.goto(0,200)
    text.write('Melting Icebergs and Rising Sea levels', False, align = 'center', font = ('Arial', 25, 'bold'))
    text.goto(-250, 120)
    text.write('1. Rising Sea Levels', False, font = ('Arial', 18, 'bold'))
    text.goto(-240, 90)
    text.write('Melting icebergs raise sea levels, endangering coastal areas', font = ('Arial', 14))
    text.goto(-250, 30)
    text.write('2. Ecosystem Impacts', False, font = ('Arial', 18, 'bold'))
    text.goto(-240, 0)
    text.write('Rising sea levels hurt marine ecosystems and biodiveristy', font = ('Arial', 14))
    text.goto(-250, -60)
    text.write('3. Human affect', False, font = ('Arial', 18, 'bold'))
    text.goto(-250, -90)
    text.write('Millions of people along the coast are dispalced due to constant flooding', font = ('Arial', 14))
    button.onclick(game_intro)
    ice_list = []
    ice_list.append(make_iceberg(random.randint(-300, -200), -210))
    ice_list.append(make_iceberg(random.randint(-200, 100), -210))
    ice_list.append(make_iceberg(random.randint(100, 300), -210))
    for icebergs in ice_list:
        for i in range(10):
            icebergs.shapesize(5 - (0.5 * i), 7 - (0.7* i))
            icebergs.goto(icebergs.xcor(), icebergs.ycor() - (i * 4))
            turtle.delay(100)
        icebergs.hideturtle()

tree_bool = True

def tree_1(sz,color):
    t.speed(0)
    t.shape("arrow")
    t.fillcolor(color) 
    t.pencolor("")
    t.width(3) 
    t.pendown()
    t.setheading(0)
    t.left(90)
    t.forward(sz*0.36)
    t.left(90)
    t.forward(sz*0.2)
    t.setheading(0)
    t.begin_fill()
    t.forward(sz*0.6)
    t.left(120)
    t.forward(sz*0.6)
    t.left(120)
    t.forward(sz*0.6)
    t.end_fill()
    t.left(120)
    t.forward(sz*.2)
    t.penup()
    t.right(90)
    t.pendown()
    t.begin_fill()
    t.forward(sz*0.4)
    t.left(90)
    t.forward(sz*0.2)
    t.left(90)
    t.forward(sz*0.4)
    t.left(90)
    t.forward(sz*0.2)
    t.end_fill()
    t.penup()
    t.right(180)
    t.forward(sz*0.64)
    t.right(90)
    t.forward(sz*0.3)
    t.setheading(0)

def tree_2(sz,color):
    t.speed(0)
    t.shape("turtle")
    t.fillcolor(color) 
    t.pencolor("")
    t.width(3) 
    t.left(90)
    t.forward(sz*1.1)
    t.right(90)
    t.pendown()
    t.begin_fill()   
    for i in range(2):        
        t.setheading(-120)      
        t.begin_fill()       
        for j in range(3):          
            t.forward(sz/2)         
            t.left(120)      
        t.end_fill()        
        t.setheading(-90)        
        t.forward(sz/4)   
    t.pencolor(color)
    t.pendown()  
    t.width(14) 
    t.forward(sz*0.6)
    t.left(90)
    t.penup()
    t.forward(sz*0.5)
    
def tree_3(sz,color):
    t.speed(0)
    t.shape("turtle")
    t.fillcolor(color) 
    t.pencolor("")
    t.width(14) 
    t.left(90)
    t.forward(sz*1.1)
    t.right(90)
    t.pendown()
    t.begin_fill()   
    for i in range(3):        
        t.setheading(-120)      
        t.begin_fill()       
        for j in range(3):          
            t.forward(sz/2)         
            t.left(120)      
        t.end_fill()        
        t.setheading(-90)        
        t.forward(sz/4)   
    t.pencolor(color)
    t.pendown()  
    t.width(14) 
    t.forward(sz*0.4)
    t.left(90)
    t.penup()
    t.forward(sz*0.5)

def draw_tree(leafcolor,barkcolor):
    global tree_bool
    if not tree_bool:
        return
    tree.speed(0)
    tree.pendown()
    tree.width(3)
    tree.fillcolor(leafcolor)
    tree.begin_fill()
    tree.setheading(0)
    tree.forward(80)
    tree.left(120)
    tree.forward(100)
    tree.left(120)
    tree.forward(100)
    tree.end_fill()
    tree.left(120)
    tree.forward(40)
    tree.penup()
    tree.right(90)
    tree.pendown()
    tree.fillcolor(barkcolor)
    tree.begin_fill()
    tree.forward(40)
    tree.left(90)
    tree.forward(20)
    tree.left(90)
    tree.forward(40)
    tree.left(90)
    tree.forward(20)
    tree.end_fill()
    tree.penup()
    tree.right(180)

def tree_screen(x, y):
    s.clear()
    s.bgcolor('lightgreen')
    building_connector(1300,-650,-565,"lime green")
    t.goto(-650,70)
    for l in range(30):
        tree_i = random.randint(1,3)
        if tree_i == 1:
            tree_1(random.randint(90,100),"lime green")
        if tree_i == 2:
            tree_2(random.randint(90,100),"lime green")
        if tree_i == 3:
            tree_3(random.randint(90,100),"lime green")
    building_connector(1300,-650,-690,"green")
    t.goto(-650,-75)
    for l in range(30):
        tree_i = random.randint(1,3)
        if tree_i == 1:
            tree_1(random.randint(90,100),"green")
        if tree_i == 2:
            tree_2(random.randint(90,100),"green")
        if tree_i == 3:
            tree_3(random.randint(90,100),"green")

    text.clear()
    text.penup()
    text.goto(0,200)
    text.color('black')
    text.write('Deforestation', False, align = 'center', font = ('Arial', 25, 'bold'))
    text.goto(-250, 120)
    text.write('1. Overall climate', False, font = ('Arial', 18, 'bold'))
    text.goto(-240, 70)
    text.write('Trees absord C02, cutting them down will increase greenhouse gas emmisions\neven more', font = ('Arial', 14))
    text.goto(-250, 30)
    text.write('2. Loss of biodiversity', False, font = ('Arial', 18, 'bold'))
    text.goto(-240, 0)
    text.write('Deforestation causes habitat detsruction, which can lead to speices extinction', font = ('Arial', 14))
    text.goto(-250, -60)
    text.write('3. Soil Erosion', False, font = ('Arial', 18, 'bold'))
    text.goto(-250, -90)
    text.write('Trees help hold soil, without them the soil will erode and lose fertility', font = ('Arial', 14))
    button = turtle.Turtle()
    turtle.addshape('button.gif')
    button.shape("button.gif")
    button.penup()
    button.goto(300, -180)
    button.showturtle()
    tree.penup()
    tree.goto(-300, -210)
    button.onclick(city_screen)
    for i in range(6):
        tree.speed(5)
        draw_tree('dark green','brown')
        tree.forward(75)
    tree.goto(-300, -210)
    for i in range(6):
        tree.speed(0)
        draw_tree('black','black')
        tree.forward(75)
    tree.clear()
    t.goto(-300, -210)

def game_intro(x, y):
    s.clear()
    button = turtle.Turtle()
    turtle.addshape('button.gif')
    button.shape("button.gif")
    button.penup()
    s.bgpic('color.gif')
    text.color('white')
    global tree_bool
    tree_bool = False
    t.hideturtle()
    text.clear()
    text.penup()
    text.goto(0, 100)
    text.write('Welcome to the Climate Change Adventure', align = 'center', font = ('Arial', 28, 'bold'))
    text.goto(0, 60)
    text.write('In this game you will be presented with 2 options', False, align = 'center', font = ('Arial', 20))
    text.goto(0, 20)
    text.write('You will choose the more environmentally friendly option', False, align = 'center', font = ('Arial', 20))
    text.goto(0, -20)
    text.write('Complete the game and learn how to be more environmentally conscious and become... ', False, align = 'center', font = ('Arial', 15))
    text.goto(0, -110)
    text.write('CLIMATE CHANGE STOPPER ', False, align = 'center', font = ('Arial', 40))
    button.hideturtle()
    button.penup()
    button.goto(0,-150)
    button.showturtle()
    button.onclick(game_screen1)

    
def game_screen1(x, y):
    s.clear()
    face = turtle.Turtle()
    face.speed(0)
    face.penup()
    face.goto(330,250)
    face.shape(faces[face_i])

    def check_distance(item1, item2, text_right, text_wrong, screen):
        if (bugs.distance(item1) < 60):
            button = turtle.Turtle()
            turtle.addshape('button.gif')
            button.shape("button.gif")
            button.hideturtle()
            text.clear()
            text.penup()
            text.goto(0, 155)
            text.color('green')
            text.write(text_right, False, align = 'center',font = ('Arial', 15))
            button.penup()
            button.showturtle()
            button.onclick(screen)
            previous_answer = True
        elif (bugs.distance(item2) < 60):
            text.clear()
            text.penup()
            text.goto(0, 155)
            text.color('red')
            text.write(text_wrong, False, align = 'center',font = ('Arial', 15))
            previous_answer = False
    correct_recycle = 'CORRECT. Recycling can prevent the emission of greenhouse gases'
    wrong_trash = 'INCORRECT. Landfill contribute to C02 emmisions, try again'
    recycle = turtle.Turtle()
    turtle.addshape('recycle.gif')
    recycle.shape('recycle.gif')
    recycle.hideturtle()
    bugs = turtle.Turtle()
    turtle.addshape('bugs.gif')
    bugs.shape('bugs.gif')
    bugs.hideturtle()
    trash = turtle.Turtle()
    turtle.addshape('trash.gif')
    trash.shape('trash.gif')
    trash.hideturtle()
    s.bgpic('kitchen.gif')
    button.hideturtle()
    text.clear()
    bugs.penup()
    bugs.hideturtle()
    bugs.goto(0,-100)
    bugs.showturtle()
    trash.penup()
    trash.hideturtle()
    trash.goto(-320, -140)
    trash.showturtle()
    recycle.penup()
    recycle.hideturtle()
    recycle.goto(320, -140)
    recycle.showturtle()
    def up():
        bugs.setheading(90)
        bugs.forward(20)
        check_distance(recycle, trash, correct_recycle, wrong_trash, game_screen2)
    def down():
        bugs.setheading(270)
        bugs.forward(20)
        check_distance(recycle, trash, correct_recycle, wrong_trash, game_screen2)   
    def left():
        bugs.setheading(180)
        bugs.forward(20)   
        check_distance(recycle, trash, correct_recycle, wrong_trash, game_screen2)

    def right():
        bugs.setheading(360)
        bugs.forward(20)
        check_distance(recycle, trash, correct_recycle, wrong_trash, game_screen2)
    s.onkey(up, 'Up')
    s.onkey(down, "Down")
    s.onkey(left, "Left")
    s.onkey(right, 'Right')
    s.listen()
    
def face_counter():
    global face_i
    if previous_answer== True:
        face_i += 1
    elif previous_answer== False:
        face_i -= 1
    return face_i

def game_screen2(x, y):
    global face_i
    s.clear()
    face_counter()
    face = turtle.Turtle()
    face.speed(0)
    face.penup()
    face.goto(330,250)
    face.shape(faces[face_i])
    face.showturtle()
    


    def check_distance(item1, item2, text_right, text_wrong, screen):
        if (bugs.distance(item1) < 60):
            button = turtle.Turtle()
            turtle.addshape('button.gif')
            button.shape("button.gif")
            button.hideturtle()
            text.clear()
            text.penup()
            text.goto(0, 130)
            text.color('green')
            text.write(text_right, False, align = 'center',font = ('Arial', 15))
            button.penup()
            button.showturtle()
            button.onclick(screen)
        elif (bugs.distance(item2) < 60):
            text.clear()
            text.penup()
            text.goto(0, 140)
            text.color('red')
            text.write(text_wrong, False, align = 'center',font = ('Arial', 15))
    correct_bike = 'CORRECT. Cutting down on car rides can lessen C02 into the atmosphere'
    wrong_car = 'INCORRECT. Cars harm our health and contain greenhouse gases\nthat cause climate change, try again'
    bugs = turtle.Turtle()
    turtle.addshape('bugs.gif')
    bugs.shape('bugs.gif')
    car = turtle.Turtle()
    turtle.addshape('car.gif')
    car.shape('car.gif')
    car.hideturtle()
    bike = turtle.Turtle()
    turtle.addshape('bike.gif')
    bike.shape('bike.gif')
    bike.hideturtle()
    button.hideturtle()
    s.bgpic('street.gif')
    text.clear()
    car.penup()
    car.goto(-320, -140)
    car.showturtle()
    bike.penup()
    bike.goto(320, -140)
    bike.showturtle()
    bugs.penup()
    bugs.goto(0,-100)
    bugs.showturtle()
    def up():
        bugs.setheading(90)
        bugs.forward(20)
        check_distance(bike, car, correct_bike, wrong_car, game_screen3)
    def down():
        bugs.setheading(270)
        bugs.forward(20)
        check_distance(bike, car, correct_bike, wrong_car, game_screen3)   
    def left():
        bugs.setheading(180)
        bugs.forward(20)   
        check_distance(bike, car, correct_bike, wrong_car, game_screen3)
    def right():
        bugs.setheading(360)
        bugs.forward(20)
        check_distance(bike, car, correct_bike, wrong_car, game_screen3)
    s.onkey(up, 'Up')
    s.onkey(down, "Down")
    s.onkey(left, "Left")
    s.onkey(right, 'Right')
    s.listen()

def game_screen3(x, y):
    global face_i
    s.clear()
    face_counter()
    face = turtle.Turtle()
    face.speed(0)
    face.penup()
    face.goto(330,250)
    face.shape(faces[face_i])
    face.showturtle()
    def check_distance(item1, item2, text_right, text_wrong, screen):
        if (bugs.distance(item1) < 60):
            button = turtle.Turtle()
            turtle.addshape('button.gif')
            button.shape("button.gif")
            button.hideturtle()
            text.clear()
            text.penup()
            text.goto(0, 170)
            text.color('green')
            text.write(text_right, False, align = 'center',font = ('Arial', 15))
            button.penup()
            button.showturtle()
            button.onclick(screen)
            previous_answer = True
        elif (bugs.distance(item2) < 60):
            text.clear()
            text.penup()
            text.goto(0, 170)
            text.color('red')
            text.write(text_wrong, False, align = 'center',font = ('Arial', 15))
    correct_reusable = 'CORRECT. Cutting down on plastic and using\nreusable materials you cut down on plastic pollution'
    wrong_plastic = 'INCORRECT. Majority of plastic ends up in oceans, hurting\nus and animals, try again'
    plastic = turtle.Turtle()
    turtle.addshape('plastic.gif')
    plastic.shape('plastic.gif')
    plastic.hideturtle()
    reusable = turtle.Turtle()
    turtle.addshape('reusable.gif')
    reusable.shape('reusable.gif')
    reusable.hideturtle()
    bugs = turtle.Turtle()
    turtle.addshape('bugs.gif')
    bugs.shape('bugs.gif')
    button.hideturtle()
    s.bgpic('store.gif')
    text.clear()
    reusable.penup()
    reusable.goto(-320, -140)
    reusable.showturtle()
    plastic.penup()
    plastic.goto(320, -140)
    plastic.showturtle()
    bugs.penup()
    bugs.goto(0,-100)
    bugs.showturtle()
    def up():
        bugs.setheading(90)
        bugs.forward(20)
        check_distance(reusable, plastic, correct_reusable, wrong_car, game_screen3)
    def down():
        bugs.setheading(270)
        bugs.forward(20)
        check_distance(reusable, plastic, correct_reusable, wrong_plastic, certificate)   
    def left():
        bugs.setheading(180)
        bugs.forward(20)   
        check_distance(reusable, plastic, correct_reusable, wrong_plastic, certificate)
    def right():
        bugs.setheading(360)
        bugs.forward(20)
        check_distance(reusable, plastic, correct_reusable, wrong_plastic, certificate)
    s.onkey(up, 'Up')
    s.onkey(down, "Down")
    s.onkey(left, "Left")
    s.onkey(right, 'Right')
    s.listen()

def certificate(x, y):
    t.penup()
    
opening_screen()
turtle.mainloop()